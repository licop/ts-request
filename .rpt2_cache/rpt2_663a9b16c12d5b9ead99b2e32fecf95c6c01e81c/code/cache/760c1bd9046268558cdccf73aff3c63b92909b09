{"map":"{\"version\":3,\"file\":\"InterceptorManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/InterceptorManager.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AASH;IAGE;QACE,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;IACxB,CAAC;IAED,gCAAG,GAAH,UAAI,QAAuB,EAAE,QAAqB;QAChD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACrB,QAAQ,UAAA;YACR,QAAQ,UAAA;SACT,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAA;IACrC,CAAC;IAED,oCAAO,GAAP,UAAQ,EAA0C;QAChD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YACnC,IAAI,WAAW,KAAK,IAAI,EAAE;gBACxB,EAAE,CAAC,WAAW,CAAC,CAAA;aAChB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,kCAAK,GAAL,UAAM,EAAU;QACd,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAA;SAC7B;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AA5BD,IA4BC\"}","code":"/**\r\n * 拦截器管理类\r\n */\r\nvar InterceptorManager = /** @class */ (function () {\r\n    function InterceptorManager() {\r\n        this.interceptors = [];\r\n    }\r\n    InterceptorManager.prototype.use = function (resolved, rejected) {\r\n        this.interceptors.push({\r\n            resolved: resolved,\r\n            rejected: rejected\r\n        });\r\n        return this.interceptors.length - 1;\r\n    };\r\n    InterceptorManager.prototype.forEach = function (fn) {\r\n        this.interceptors.forEach(function (interceptor) {\r\n            if (interceptor !== null) {\r\n                fn(interceptor);\r\n            }\r\n        });\r\n    };\r\n    InterceptorManager.prototype.eject = function (id) {\r\n        if (this.interceptors[id]) {\r\n            this.interceptors[id] = null;\r\n        }\r\n    };\r\n    return InterceptorManager;\r\n}());\r\nexport default InterceptorManager;\r\n//# sourceMappingURL=InterceptorManager.js.map","dts":{"name":"/Users/licop/Documents/GitHub/ts-request/dist/types/core/InterceptorManager.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 拦截器管理类\r\n */\r\nimport { RejectedFn, ResolvedFn } from '../types';\r\ninterface Interceptor<T> {\r\n    resolved: ResolvedFn<T>;\r\n    rejected?: RejectedFn;\r\n}\r\nexport default class InterceptorManager<T> {\r\n    private interceptors;\r\n    constructor();\r\n    use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;\r\n    forEach(fn: (interceptors: Interceptor<T>) => void): void;\r\n    eject(id: number): void;\r\n}\r\nexport {};\r\n"}}
